using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using NUnit.Framework;

namespace WTG.Analyzers.Utils.Test
{
	[TestFixture]
	internal class SyntaxTreeExtensionsTest
	{
		[TestCase("Barry.cs", ExpectedResult = false)]
		[TestCase("Barry.g.cs", ExpectedResult = true)]
		[TestCase("Barry.Designer.cs", ExpectedResult = true)]
		[TestCase(".NETCoreApp,Version=v1.1.AssemblyAttributes.cs", ExpectedResult = true)]
		[TestCase(".NETFramework,Version=v4.0.AssemblyAttributes.AssemblyAttributes.cs", ExpectedResult = true)]
		[TestCase(".NETFramework,Version=v4.5.AssemblyAttributes.AssemblyAttributes.cs", ExpectedResult = true)]
		[TestCase(".NETFramework,Version=v4.5.1.AssemblyAttributes.AssemblyAttributes.cs", ExpectedResult = true)]
		[TestCase(".NETFramework,Version=v4.5.2.AssemblyAttributes.AssemblyAttributes.cs", ExpectedResult = true)]
		[TestCase(".NETFramework,Version=v4.6.AssemblyAttributes.AssemblyAttributes.cs", ExpectedResult = true)]
		[TestCase(".NETFramework,Version=v4.6.AssemblyAttributes.AssemblyAttributes.vb", ExpectedResult = true)]
		[TestCase(".NETFramework,Version=v4.6.1.AssemblyAttributes.AssemblyAttributes.cs", ExpectedResult = true)]
		[TestCase(".NETFramework,Version=v4.6.2.AssemblyAttributes.AssemblyAttributes.cs", ExpectedResult = true)]
		[TestCase(".NETFramework,Version=v4.7.AssemblyAttributes.AssemblyAttributes.cs", ExpectedResult = true)]
		[TestCase(".NETPortable,Version=v4.5,Profile=Profile7.AssemblyAttributes.AssemblyAttributes.cs", ExpectedResult = true)]
		[TestCase(".NETStandard,Version=v1.3.AssemblyAttributes.cs", ExpectedResult = true)]
		[TestCase(".NETStandard,Version=v1.4.AssemblyAttributes.cs", ExpectedResult = true)]
		[TestCase(".NETStandard.AssemblyAttributes.,Version=v1.4.cs", ExpectedResult = false)]
		[TestCase(".AssemblyAttributes.NETStandard,Version=v1.4.cs", ExpectedResult = false)]
		[TestCase(".NETStandard.AssemblyAttributes,Version=v1.4.cs", ExpectedResult = false)]
		public async Task<bool> IsGeneratedByFilename(string filename)
		{
			return await Check(filename, "//text").ConfigureAwait(false);
		}

		[TestCase("// Magic", ExpectedResult = false, TestName = "{m} - No marker")]
		[TestCase("// <auto-generated>", ExpectedResult = true, TestName = "{m} - unclosed marker")]
		[TestCase("// <auto-generated />", ExpectedResult = true, TestName = "{m} - closed marker")]
		public async Task<bool> IsGeneratedByContent(string content)
		{
			return await Check("Barry.cs", content).ConfigureAwait(false);
		}

		#region Implementation

		static async Task<bool> Check(string filename, string content)
		{
			var document =
				new AdhocWorkspace()
				.CurrentSolution
				.AddProject("Barry", "Barry", LanguageNames.CSharp)
				.AddDocument(filename, SourceText.From(content));

			var tree = await document.GetSyntaxTreeAsync().ConfigureAwait(false);
			return tree.IsGenerated(default(CancellationToken));
		}

		#endregion
	}
}
