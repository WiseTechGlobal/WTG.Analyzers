// <auto-generated />
using Microsoft.CodeAnalysis;

namespace WTG.Analyzers
{
	internal static class Rules
	{
		public const string CodingConventionCategory = "CodingConvention";
		public const string CorrectnessCategory = "Correctness";
		public const string DoNotUseThePrivateKeywordDiagnosticID = "WTG1001";
		public const string UseVarWherePossibleDiagnosticID = "WTG1002";
		public const string DoNotLeaveWhitespaceOnTheEndOfTheLineDiagnosticID = "WTG1003";
		public const string DoNotConfigureAwaitFromAsyncVoidDiagnosticID = "WTG2001";

		public static readonly DiagnosticDescriptor DoNotUseThePrivateKeywordRule = new DiagnosticDescriptor(
			DoNotUseThePrivateKeywordDiagnosticID,
			"Do not use the 'private' keyword.",
			"Our coding convention is to leave out the private keyword and let it default to private.",
			CodingConventionCategory,
			DiagnosticSeverity.Hidden,
			isEnabledByDefault: true,
			description: "Remove the 'private' keyword.",
			customTags: new[]
			{
				WellKnownDiagnosticTags.Unnecessary,
			});

		public static readonly DiagnosticDescriptor UseVarWherePossibleRule = new DiagnosticDescriptor(
			UseVarWherePossibleDiagnosticID,
			"Use the 'var' keyword instead of an explicit type where possible.",
			"The compiler is able to correctly identify which type to use here, so replace the explicit type with var.",
			CodingConventionCategory,
			DiagnosticSeverity.Hidden,
			isEnabledByDefault: true,
			description: "Replace with the 'var' keyword.",
			customTags: new[]
			{
				WellKnownDiagnosticTags.Unnecessary,
			});

		public static readonly DiagnosticDescriptor DoNotLeaveWhitespaceOnTheEndOfTheLineRule = new DiagnosticDescriptor(
			DoNotLeaveWhitespaceOnTheEndOfTheLineDiagnosticID,
			"Do not leave whitespace on the end of the line.",
			"You have meaningless whitespace on the end of the line, remove it.",
			CodingConventionCategory,
			DiagnosticSeverity.Info,
			isEnabledByDefault: true,
			description: "Remove whitespace from the end of the line.",
			customTags: new[]
			{
				WellKnownDiagnosticTags.Unnecessary,
			});

		public static readonly DiagnosticDescriptor DoNotConfigureAwaitFromAsyncVoidRule = new DiagnosticDescriptor(
			DoNotConfigureAwaitFromAsyncVoidDiagnosticID,
			"Do not use ConfigureAwait from an async void method.",
			"ConfigureAwait(false) in async void methods leads to numerous problems, and since true is the default, just don't call ConfigureAwait from an async void method.",
			CorrectnessCategory,
			DiagnosticSeverity.Error,
			isEnabledByDefault: true,
			description: "Remove the ConfigureAwait call, or return Task.");

		/// <summary>
		/// Our coding convention is to leave out the private keyword and let it default to private.
		/// </summary>
		public static Diagnostic CreateDoNotUseThePrivateKeywordDiagnostic(Location location)
		{
			return Diagnostic.Create(DoNotUseThePrivateKeywordRule, location);
		}

		/// <summary>
		/// The compiler is able to correctly identify which type to use here, so replace the explicit type with var.
		/// </summary>
		public static Diagnostic CreateUseVarWherePossibleDiagnostic(Location location)
		{
			return Diagnostic.Create(UseVarWherePossibleRule, location);
		}

		/// <summary>
		/// You have meaningless whitespace on the end of the line, remove it.
		/// </summary>
		public static Diagnostic CreateDoNotLeaveWhitespaceOnTheEndOfTheLineDiagnostic(Location location)
		{
			return Diagnostic.Create(DoNotLeaveWhitespaceOnTheEndOfTheLineRule, location);
		}

		/// <summary>
		/// ConfigureAwait(false) in async void methods leads to numerous problems, and since true is the default, just don't call ConfigureAwait from an async void method.
		/// </summary>
		public static Diagnostic CreateDoNotConfigureAwaitFromAsyncVoidDiagnostic(Location location)
		{
			return Diagnostic.Create(DoNotConfigureAwaitFromAsyncVoidRule, location);
		}
	}
}
