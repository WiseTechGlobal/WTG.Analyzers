<?xml version="1.0" encoding="utf-8" ?>
<rules xmlns="http://cargowise.com/glow/2016/09/10/Rules.xsd" prefix="WTG">
	<category name="CodingConvention" id="1000">
		<rule id="1" name="DoNotUseThePrivateKeyword" severity="Hidden">
			<title>Do not use the 'private' keyword.</title>
			<message>Our convention is to omit the 'private' modifier where it is already the default.</message>
			<description>Remove the 'private' keyword.</description>
			<tag>Unnecessary</tag>
		</rule>
		<rule id="2" name="UseVarWherePossible" severity="Hidden">
			<title>Use the 'var' keyword instead of an explicit type where possible.</title>
			<message>The compiler is able to correctly identify which type to use here, so replace the explicit type with var.</message>
			<description>Replace with the 'var' keyword.</description>
			<tag>Unnecessary</tag>
		</rule>
		<rule id="3" name="DoNotLeaveWhitespaceOnTheEndOfTheLine" severity="Info">
			<title>Do not leave whitespace on the end of the line.</title>
			<message>You have meaningless whitespace on the end of the line, remove it.</message>
			<description>Remove whitespace from the end of the line.</description>
			<tag>Unnecessary</tag>
		</rule>
		<rule id="4" name="IndentWithTabsRatherThanSpaces" severity="Info">
			<title>Indent with tabs rather than spaces.</title>
			<message>Our coding convention is to use tabs, not spaces, you may need to fix your settings.</message>
			<description>Replace the leading spaces with tabs.</description>
			<tag>Unnecessary</tag>
		</rule>
		<rule id="5" name="UseConsistentLineEndings" severity="Info">
			<title>Use consistent line endings.</title>
			<message>All line endings should be using CRLF, this issue usually occures when copying code from another source.</message>
			<description>Replace the line ending character sequence with CRLF.</description>
		</rule>
		<rule id="6" name="DoNotUseTheInternalKeywordForTopLevelTypes" severity="Hidden">
			<title>Do not use the 'internal' keyword for non-nested type definitions.</title>
			<message>Our convention is to omit the 'internal' modifier on types where it is already the default.</message>
			<description>Remove the 'internal' keyword.</description>
			<tag>Unnecessary</tag>
		</rule>
		<rule id="7" name="DoNotCompareBoolToAConstantValue" severity="Info">
			<!-- For when the check would take place in IL -->
			<title>Do not compare bool to a constant value.</title>
			<message>Do not compare bool to a constant value.</message>
			<description>Either use the original value as-is, or use a logical-not operator ('!')</description>
			<tag>Unnecessary</tag>
		</rule>
		<rule id="8" name="DoNotCompareBoolToAConstantValueInAnExpression" severity="Info">
			<!-- For when the check would take place in a linq expression tree -->
			<title>Do not compare bool to a constant value in an expression.</title>
			<message>Do not compare bool to a constant value in an expression.</message>
			<description>Either use the original value as-is, or use a logical-not operator ('!')</description>
			<tag>Unnecessary</tag>
		</rule>
		<rule id="9" name="UsingDirectivesMustBeOrderedByKind" severity="Info">
			<title>Using directives must be ordered by kind.</title>
			<message>'using' directives should be placed before 'using static' directives, which in turn must be placed before 'using' alias directives.</message>
			<description>Move all 'using static' statements after 'using' statements, and move 'using X=Y' to the end.</description>
		</rule>
		<rule id="10" name="UseOutVarWherePossible" severity="Hidden">
			<!-- For when the type is in an out argument. -->
			<title>Use the 'var' keyword instead of an explicit type where possible.</title>
			<message>The compiler is able to correctly identify which type to use here, so replace the explicit type with var.</message>
			<description>Replace with the 'var' keyword.</description>
			<tag>Unnecessary</tag>
		</rule>
		<rule id="11" name="DeconstructWithSingleVar" severity="Info">
			<title>Use the 'var' keyword once when deconstructing an object.</title>
			<message>Only declare 'var' once when deconstructing an object, if applicable.</message>
			<description>Move 'var' outside of the deconstruction expression.</description>
			<tag>Unnecessary</tag>
		</rule>
		<rule id="12" name="DeconstructWithVar" severity="Hidden">
			<title>Use the 'var' keyword instead of an explicit type where possible.</title>
			<message>The compiler is able to correctly identify which type to use here, so replace the explicit type with var.</message>
			<description>Replace with the 'var' keyword.</description>
			<tag>Unnecessary</tag>
		</rule>
		<rule id="13" name="AvoidTupleTypesInPublicInterfaces" severity="Info">
			<title>Don't use tuple types in public interfaces.</title>
			<message>Tuple types don't impart useful semantic information, public interfaces should use a dedicated type instead.</message>
			<description>Replace with a dedicated type.</description>
		</rule>
		<rule id="14" name="DontNestConditionalOperators" severity="Info">
			<title>Don't nest conditional operators.</title>
			<message>Nesting conditional operators makes the code harder to read, use an 'if' statement instead.</message>
			<description>Replace the outer conditional operator with an 'if' statement.</description>
		</rule>
		<rule id="15" name="ConditionalOperatorsShouldNotHaveMultilineValues" severity="Info">
			<title>Conditional operators should not have multiline values.</title>
			<message name="WhenTrue">The true operand of a conditional operator should occupy a single line, the same line as the '?' symbol.</message>
			<message name="WhenFalse">The false operand of a conditional operator should occupy a single line, the same line as the ':' symbol.</message>
			<description>If you cannot fit the operand on a single line, then an 'if' statement will be a more readable option.</description>
		</rule>
		<rule id="16" name="AvoidDiscardCoalesceThrow" severity="Info">
			<title>Avoid the discard-coalesce-throw pattern.</title>
			<message>Prefer an if-throw over assigning a coalesce-throw expression to the discard symbol.</message>
			<description>Prefer an if-throw over assigning a coalesce-throw expression to the discard symbol.</description>
		</rule>
	</category>
	<category name="Correctness" id="2000">
		<rule id="1" name="DoNotConfigureAwaitFromAsyncVoid" severity="Error">
			<title>Do not use ConfigureAwait from an async void method.</title>
			<message>ConfigureAwait(false) may result in the async method resuming on a non-deterministic thread, and if an exception is then thrown, it will likely be unhandled and result in process termination.</message>
			<description>Remove the ConfigureAwait call, or return Task.</description>
		</rule>
		<rule id="2" name="AvoidConditionalCompilationBasedOnDebug">
			<title>Avoid conditional compilation based on DEBUG.</title>
			<message>Avoid referencing DEBUG in #if or #elif.</message>
			<description>Changing the behaviour in debug vs release means our tests are not testing what the user sees. Consider using debug switches or command line arguments instead.</description>
		</rule>
		<rule id="3" name="FlagEnumsShouldSpecifyExplicitValues">
			<title>Flags enums should specify explicit values.</title>
			<message>This member does not specify an explicit value.</message>
			<description>The auto-generated values for enums don't work well for flag enums, so you should specify the value explicitly.</description>
		</rule>
		<rule id="4" name="DoNotUseCodeContracts" severity="Warning">
			<title>This project does not use Code Contracts.</title>
			<message>This project does not use Code Contracts.</message>
			<description>References to Code Contracs should be replaced with alternate forms of checking or should be deleted.</description>
			<tag>Unnecessary</tag>
		</rule>
		<rule id="5" name="UseCorrectEmitOverload" severity="Warning">
			<title>Use Correct Emit Overload</title>
			<message>The {opcode} opcode cannot be used with this emit overload.</message>
			<message name="None">The {opcode} opcode does not take an argument.</message>
			<description>The emit methods generally don't pay attention to the opcode when emitting the operand, so using the wrong overload may result in unexpected behaviour that is difficult to debug.</description>
		</rule>
		<rule id="6" name="ForbidCompiledInStaticRegexMethods" severity="Warning">
			<title>Do not pass the Compiled option into static methods on Regex.</title>
			<message>Do not use the Compiled option when calling static methods on Regex.</message>
			<description>The static methods on Regex will discard the regex object, largely negating the benifits of the Compiled option and leaving you with just the increased costs.</description>
		</rule>
	</category>
	<category name="Decruftification" id="3000">
		<rule id="1" name="RemovedOrphanedSuppressions" severity="Info">
			<title>Remove orphaned suppressions.</title>
			<message>Encountered a code analysis suppression for the non-existent {targetKind} '{targetName}'. Remove or update it.</message>
			<description>If you change or remove a type or member that had a code analysis suppression against it, be sure to remove any orphaned suppression attributes. This is usually easier to maintain if the suppression attributes are applied directly to the type/member rather than applied to the assembly in a GlobalSuppressions.cs file.</description>
			<tag>Unnecessary</tag>
		</rule>
		<rule id="2" name="PreferDirectMemberAccessOverLinq" severity="Info">
			<!-- For when the check would take place in IL -->
			<title>Prefer direct member access over linq.</title>
			<message name="UseProperty">Don't use the {extensionName} extension method on a source of type '{sourceTypeName}', use the '{propertyName}' property instead.</message>
			<message name="UseIndexer">Don't use the {extensionName} extension method on a source of type '{sourceTypeName}', use the indexer instead.</message>
			<description>Don't use linq extension methods when there is a better alternative.</description>
		</rule>
		<rule id="3" name="PreferDirectMemberAccessOverLinqInAnExpression" severity="Info">
			<!-- For when the check would take place in a linq expression tree -->
			<title>Prefer direct member access over linq in an expression.</title>
			<message name="UseProperty">Don't use the {extensionName} extension method on a source of type '{sourceTypeName}', use the '{propertyName}' property instead.</message>
			<message name="UseIndexer">Don't use the {extensionName} extension method on a source of type '{sourceTypeName}', use the indexer instead.</message>
			<description>Don't use linq extension methods when there is a better alternative.</description>
		</rule>
		<rule id="4" name="PreferArrayEmptyOverNewArrayConstruction" severity="Info">
			<title>Prefer Array.Empty&lt;T&gt;() over creating a new empty array.</title>
			<message>Prefer to use Array.Empty&lt;T&gt;() instead of creating a new empty array.</message>
			<description>Array.Empty&lt;T&gt;() caches the array internally, so you can typically use a pre-existing immutable object instead of creating a new one.</description>
		</rule>
		<rule id="5" name="DontCallToStringOnAString" severity="Info">
			<title>Don't call ToString() on a string.</title>
			<message>Don't call ToString() on a string.</message>
			<description>Calling ToString() on a string object is redundant, just use the original string object.</description>
			<tag>Unnecessary</tag>
		</rule>
		<rule id="6" name="PreferNameofOverCallingToStringOnAnEnum" severity="Info">
			<title>Prefer nameof over calling ToString on an enum literal.</title>
			<message>Prefer nameof over calling ToString on an enum literal.</message>
			<description>Prefer nameof over calling ToString on an enum literal.</description>
		</rule>
		<rule id="7" name="RemovePointlessOverrides" severity="Info">
			<title>Overrides should not simply call base.</title>
			<message>This member overrides a member in a base class, but does not change the behaviour of the base implementation.</message>
			<message name="Method">This method overrides a method in a base class, but does not change the behaviour of the base implementation.</message>
			<message name="Property">This property overrides a property in a base class, but does not change the behaviour of the base implementation.</message>
			<message name="Indexer">This indexer overrides an indexer in a base class, but does not change the behaviour of the base implementation.</message>
			<message name="Event">This event overrides an event in a base class, but does not change the behaviour of the base implementation.</message>
			<description>This override doesn't change the behaviour of the base implementation and so should be removed.</description>
			<tag>Unnecessary</tag>
		</rule>
		<rule id="8" name="DontEquateValueTypesWithNull" severity="Info">
			<title>Do not compare value types with null.</title>
			<message>Do not compare value types with null.</message>
			<description>Value types can never be null. This expression is constant.</description>
			<tag>Unnecessary</tag>
		</rule>
		<rule id="9" name="PreferCompletedTask" severity="Info">
			<title>Prefer Task.CompletedTask when applicable.</title>
			<message>Prefer Task.CompletedTask when applicable.</message>
			<description>Prefer Task.CompletedTask when applicable.</description>
			<tag>Unnecessary</tag>
		</rule>
		<rule id="10" name="DontAwaitTriviallyCompletedTasks" severity="Info">
			<title>Don't await a trivially completed task.</title>
			<message>The task is trivially completed and so there is no point awaiting it.</message>
			<description>You can skip the task altogether.</description>
			<tag>Unnecessary</tag>
		</rule>
	</category>
	<category name="Maintainability" id="3100">
		<rule id="1" name="DoNotNestRegions" severity="Info">
			<title>Do not nest regions.</title>
			<message>Do not nest regions.</message>
			<description>Regions tend to obscure the code and nesting them generally indicates that either the code is poorly structured or it is trying to do too much.</description>
			<tag>Unnecessary</tag>
		</rule>
		<rule id="2" name="RegionsShouldNotSplitStructures" severity="Info">
			<title>Regions should not split structures.</title>
			<message>If either the start or end of a declaration/statement/expression is within a region, then both ends should be within the same region.</message>
			<description>This region is clearly confused about what it's for. Remove it.</description>
			<tag>Unnecessary</tag>
		</rule>
		<rule id="3" name="ConditionalCompilationDirectivesShouldNotSplitStructures" severity="Info">
			<title>Conditional compilation directives should not split structures.</title>
			<message>If either the start or end of a declaration/statement/expression is within a conditional compilation block, then both ends should be within the same block.</message>
			<description>The conditional compilation directive is either confused or you are trying to do something dodgy. Changing method signatures/visibility based on compiler directives is just asking for trouble.</description>
		</rule>
	</category>
</rules>
